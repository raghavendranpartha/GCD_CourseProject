a <- 5
a
q()
install.packages("sortinghat")
install.packages("R.matlab")
clear
R --version
R.version
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(kernsmooth)
library(KernSmooth)
x<-1:4
y<-2:3
x+y
class(x+y)
dd<-read.table('./rprog-data-quiz1_data//hw1_data.csv')
dd<-read.table('./rprog-data-quiz1_data//hw1_data.csv',header=T)
dd<-read.csv('./rprog-data-quiz1_data//hw1_data.csv',header=T)
dd
nrows(dd)
dim(dd)
dd[1:2,]
dd[-1:-2,]
dd[152:153,]
dd[47,'Ozone']
bad<-is.na(dd[,1])
sum(bad)
mean(dd[!bad,1])
dds<-subset(dd,Ozone>31 && Temp > 90)
dds
dds<-subset(dd,'Ozone'>31 && 'Temp' > 90)
dds<-subset(dd,'Ozone'>31 and 'Temp' > 90)
dds<-subset(dd,'Ozone'>31 && 'Temp' > 90)
dds
dds<-subset(dd,Ozone>31 & Temp > 90)
dds
mean(dds[,2])
dds1=subset(dd,Month==6)
dds1
mean(dds1[,'Temp'])
dds2=subset(dd,Month==5)
dds2
max(dds2[,1])
x<-c(4,T)
x
class(x)
x<-1:4
class(x+y)
x+y
dd[47,1]
sum(bad)
install.packages("swirl")
library(swirl)
rm
rm(list=ls())
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files)
old.dir<-getwd()
dir.create('testdir')
setwd('./testdir/')
setwd('testdir')
setwd("testdir")
ls
ls()
setwd("testdir")
setwd('../')
setwd("testdir")
setwd("testdir")
setwd('testdir')
setwd('testdir')
setwd('./testdir')
setwd('./testdir/')
getwd()
cd('./Documents/')
setwd('./Documents/')
setwd("testdir/")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R",'folder1','folder2')
file.path('folder1','folder2')
?dir.create
dir.create("testdir2/testdir3")
dir.create(file.path('testdir2','testdir3'),recursive = T)
dir.create(file.path('testdir2','testdir3'),recursive = TRUE)
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir",recursive = TRUE)
swirl()
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse = " ")
my_name<-c(my_char,"Raghav")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep"")
paste(1:3,c("X","Y","Z"),sep"")
paste(1:3,c("X","Y","Z"),sep"")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x <- 1:10
if(x > 5) {
x <- 0
}
R.home()
list.files(R.home())
Sys.getenv('MYSQL_HOME')
Sys.getenv('MYSQL_HOME')
install.packages('RMySQL',type='source')
source("http://bioconductor.org/biocLite.R")
library(rhdf5)
biocLite("rhdf5")
library(rhdf4)
library(rhdf5)
library(httr)
oauth_endpoints("github")
myapp<-oauth_app("github",key="907d53557df2e2cf7cae",secret = "c4d56ac7fcde51fe863dd05ca5556617bedc6c9f")
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
exit
q()
library(httr)
oauth_endpoints("github")
myapp<-oauth_app("github",key="907d53557df2e2cf7cae",secret = "c4d56ac7fcde51fe863dd05ca5556617bedc6c9f")
myapp
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp,cache=F)
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp,cache=F)
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
library(httr)
oauth_endpoints("github")
myapp<-oauth_app("github",key="907d53557df2e2cf7cae",secret = "c4d56ac7fcde51fe863dd05ca5556617bedc6c9f")
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp,cahce=F)
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp,cache=F)
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp,cache=F)
install.packages('Rcpp')
library(httr)
oauth_endpoints("github")
myapp<-oauth_app("github",key="907d53557df2e2cf7cae",secret = "c4d56ac7fcde51fe863dd05ca5556617bedc6c9f")
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp,cache=F)
q()
library(httr)
library(httpuv)
oauth_endpoints("github")
myapp<-oauth_app("github",key="907d53557df2e2cf7cae",secret = "c4d56ac7fcde51fe863dd05ca5556617bedc6c9f")
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp,cache=F)
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp,cache=F)
q()
x<-rnorm(10)
x
f1<-gl(2,10)
f1
f1<-gl(2,5)
f2<-gl(5,2)
f2
interaction(f1,f2)
?interaction
f1
f2
split(x,interaction(f1,f2))
library(datasets)
data(iris)
?iris
head(iris)
lapply(split(iris,iris$Species),mean)
split(iris,iris$Species)
lapply(split(iris,iris$Species),mean)
lapply(split(iris,iris$Species),mean,na.rm=T)
lapply(iris,mean)
lapply(split(iris,iris$Species),function(x) colMeans(x[,"Sepal.Length"]))
lapply(split(iris,iris$Species),function(x) mean(x[,"Sepal.Length"]))
lapply(split(iris,iris$Species),colMeans)
head(iris)
class(iris)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
with(mtcars,tapply(mpg,cyl,mean))
with(mtcars,tapply(hp,cyl,mean))
hps<-with(mtcars,tapply(hp,cyl,mean))
hps
hps[1]
hps[2]-hps[1]
hps[3]-hps[1]
m <- matrix(sample(2))
m
set.seed(1)
m <- matrix(sample(8),c(4,4))
m
m <- matrix(sample(16),c(4,4))
m
solve(m)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set <- function(y){
x<<-y
inv<<-NULL
}
get <- function() x
setInv <- function(inverse) inv<<-inverse
getInv <- function() inv
list(set=set,get=get,setInv=setInv,getInv=getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<-x$getInv()
if(!is.null(inv)){
message("getting cached inverse")
return(inv)
}
mat<-x$get()
matInv<-solve(mat, ...)
x$setInv(matInv)
matInv
}
matr<-makeCacheMatrix(m)
matr
matr$get()
m
matr$getInv
matr$getInv()
m_inv<-cacheSolve(matr)
m_inv
solve(m)
class(m_inv)
cacheSolve(matr)
setwd("~/DataScience/GettingandCleaningData/Course Project")
dd<-read.fwf('./UCI HAR Dataset/train/X_train.txt',sep='\t',widths=rep(16,561),n =2,header = F)
dd
dd<-read.fwf('./UCI HAR Dataset/train/X_train.txt',sep='\t',widths=rep(16,561),header = F)
dd_train<-dd
dd_test<-read.fwf('./UCI HAR Dataset/test/X_test.txt',sep='\t',widths=rep(16,561),header = F)
dd_XTrain<-dd_train
dd_XTest<-dd_test
data_yTrain<-read.table('./UCI HAR Dataset/train/y_train.txt',colClasses=c("numeric"),header=F)
data_yTest<-read.table('./UCI HAR Dataset/test/y_test.txt',colClasses=c("numeric"),header=F)
data_XTrain<-dd_XTrain
data_XTest<-dd_XTest
fileURL<-'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
download.file(fileURL,destfile = "data.zip")
setwd('../')
getwd()
unz("data.zip")
unzip("data.zip")
data_X<-rbind(data_XTrain,data_XTest)
data_Y<-rbind(data_yTrain,data_yTest)
data_X
str(data_X)
req_inds<-c(1:6,41:46,81:86,121:126,161:166,201,202,214,215,227,228,240,241,253,254,266:271,294:296,345:350)
req_inds<-c(req_inds,373:375,424:429,452:454,503,504,513,516,517,526,529,530,539,542,543,552)
length(req_inds)
req_data_X<-data[,req_inds]
class(req_inds)
req_inds
data_[1,req_inds]
data_X[1,req_inds]
req_data<-cbind(c(data_Y),req_data_X)
req_inds<-c(1:6,41:46,81:86,121:126,161:166,201,202,214,215,227,228,240,241,253,254,266:271,294:296,345:350)
req_inds<-c(req_inds,373:375,424:429,452:454,503,504,513,516,517,526,529,530,539,542,543,552)
req_data_X<-data_X[,req_inds]
req_data<-cbind(c(data_Y),req_data_X)
head(req_data)
data_Y<-rbind(data_yTrain,data_yTest)
names(data_Y)<-"Activity"
req_data_X<-data_X[,req_inds]
req_data<-cbind(data_Y,req_data_X)
str(req_data)
req_data<-transform(req_data,Activity<-factor(Activity,levels=c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING")))
req_data[1:5,1:5]
class(req_data$Activity)
factor(Activity,levels=c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING"))
factor(sample(6,10),levels=c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING"))
factor(sample(6,10,replace = T),levels=c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING"))
sample(5,1)
sample(5,2)
sample(5,10)
sample(5,10,replace=F)
sample(5,10,replace= F)
sample(5,10,replace= T)
factor(sample(6,10,replace = T),levels=c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING"))
sample(6,10,T)
factor(sample(6,10,T))
p<-sample(6,10,T)
p
factor(p,levels=c("a","b","c","d","e","f"))
req_data<-transform(req_data,Activity<-factor(Activity,levels=c(1:6),labels=c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING")))
req_data[1:5,1:5]
class(req_data$Activity)
p
factor(p,levels=c(1:6),labels=c("a","b","c","d","e","f"))
req_inds<-c(1:6,41:46,81:86,121:126,161:166,201,202,214,215,227,228,240,241,253,254,266:271,294:296,345:350)
req_inds<-c(req_inds,373:375,424:429,452:454,503,504,513,516,517,526,529,530,539,542,543,552)
req_data_X<-data_X[,req_inds]
req_data<-cbind(data_Y,req_data_X)
req_data<-transform(req_data,Activity<-factor(Activity,levels=c(1:6),labels=c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING")))
req_data[1:5,1:5]
req_data<-transform(req_data,Activity=factor(Activity,levels=c(1:6),labels=c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING")))
req_data[1:5,1:5]
tail(req_data)
merged_data<-cbind(data_Y,req_data_X)
#Activity descriptions
merged_data<-transform(merged_data,Activity=factor(Activity,levels=c(1:6),labels=c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING")))
merged_data[1:5,1:5]
getwd()
setwd("~/DataScience/GettingandCleaningData/Course Project/UCI HAR Dataset")
setwd('../')
getwd()
feature_names<-read.table('./UCI HAR Dataset/features.txt',sep=" ",colClasses=c("numeric","character"))
feature_names
req_feature_names<-feature_names[req_inds,"V2"]
req_feature_names
class(req_feature_names)
names(merged_data)
names(merged_data)[2]
names(merged_data)[2,]
names(merged_data)[2:END]
names(merged_data)[-1]
names(merged_data)[-1]<-req_feature_names
names(merged_data)
data_subTrain<-read.table('./UCI HAR Dataset/train/subject_train.txt',colClasses=c("numeric"),header=F)
data_subTest<-read.table('./UCI HAR Dataset/test/subject_test.txt',colClasses=c("numeric"),header=F)
names(data_sub)<-"Subject"
data_sub<-rbind(data_subTrain,data_subTest)
names(data_sub)<-"Subject"
merged_data<-cbind(data_sub,data_Y,req_data_X)
merged_data<-transform(merged_data,Activity=factor(Activity,levels=c(1:6),labels=c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING")))
merged_data[1:5,1:5]
req_inds
req_inds+2
merged_data<-cbind(data_sub,data_Y,data_X)
req_inds<-c(1:6,41:46,81:86,121:126,161:166,201,202,214,215,227,228,240,241,253,254,266:271,294:296,345:350)
req_inds<-c(req_inds,373:375,424:429,452:454,503,504,513,516,517,526,529,530,539,542,543,552)
#in the merged dataset these column indices will be offset by a value of 2 because subject and activity will be the first two columns
#Extracting out only the required measurements in the merged dataset
req_data<-merged_data[,req_inds+2]
req_data<-merged_data[,c(1,2,req_inds+2)]
req_data<-transform(req_data,Activity=factor(Activity,levels=c(1:6),labels=c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING")))
head(req_data)
names(req_data)[-c(1:2)]<-req_feature_names
str(req_data)
tapply(req_data,c("Subject","Activity"),mean)
tapply(req_data,c("Subject"),mean)
tapply(req_data,c("Subject","Activity"),FUN = mean)
library(dplyr)
ddply(req_data,c("Subject","Activity"),colMeans)
library(plyr)
ddply(req_data,c("Subject","Activity"),colMeans)
fin<-group_by("Subject")
fin<-group_by(req_data,"Subject")
summarize(fin)
summarize(fin)
summarize(fin,mean)
fin
ddply(req_data,c("Subject","Activity"),function(x) colMeans(x))
colMeans(req_data)
ddply(req_data,c("Subject","Activity"),function(x) colMeans(x[,-c(1:2)]))
fin_res<-ddply(req_data,c("Subject","Activity"),function(x) colMeans(x[,-c(1:2)]))
head(fin_res)
head(fin_res,10)
req_data_grpsubact<-ddply(req_data,c("Subject","Activity"),function(x) colMeans(x[,-c(1:2)]))
write.table(req_data_grpsubact,file='FINAL_tidydata.txt',quote = F)
write.table(req_data_grpsubact,file='FINAL_tidydata.txt',sep="\t",quote = F)
write.table(req_data_grpsubact,file='FINAL_tidydata.txt',sep="\t",quote = F,row.names =F
write.table(req_data_grpsubact,file='FINAL_tidydata.txt',sep="\t",quote = F,row.names =F))
write.table(req_data_grpsubact,file='FINAL_tidydata.txt',sep="\t",quote = F,row.names =F)
